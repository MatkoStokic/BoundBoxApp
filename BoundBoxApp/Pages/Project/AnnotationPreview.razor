@using BoundBoxApp.Model;
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using Microsoft.AspNetCore.Hosting
@using System.IO
@inject IJSRuntime jsRuntime
@inject IWebHostEnvironment environment

<h3 class="mt-3">Annotation Preview</h3>

@if (annotationGroup != null && imageCategories != null && imageCategories.Count > 0)
{
    <h4>Type: @type</h4>
    <span>
        Category:
        @if (type == "Object Detection")
        {
        <select @bind="curCategory" @bind:event="oninput" class="form-control">
            @for (int i = 0; i < annotationGroup.Keys.ToList().Count; i++)
            {
                <option value="@i">
                    @imageCategories[i]
                </option>
            }
        </select>
        }
        else
        {
            <span class="pl-1">@imageCategories[0]</span>
        }
    </span>
}

<div class="w-100 my-3 d-flex">
    <div @ref="divCanvas" id="canvasContainer" class="position-relative"
         style="background-image:url('@Image.Src');background-size:contain;width:80%;display:inline-block">

        <BECanvas @ref="myCanvas" Width="@width" Height="@height"></BECanvas>
        <div class="position-absolute p-1 m-2" onmouseover="this.style.opacity=0.8;" onmouseout="this.style.opacity = 0.5;"
             style="top:50%;left:0;width:50px;border-radius:50%;background-color:#333333;opacity:0.5;cursor:pointer"
             @onclick='() => OnClick("left")'>
            <svg xmlns="http://www.w3.org/2000/svg" style="color:#f6f6f6" fill="currentColor" class="bi bi-caret-left-fill" viewBox="0 0 16 16">
                <path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z" />
            </svg>
        </div>
        <div class="position-absolute p-1 m-2" onmouseover="this.style.opacity=0.8;" onmouseout="this.style.opacity = 0.5;"
             style="top:50%;right:0;width:50px;border-radius:50%;background-color:#333333;opacity:0.5;cursor:pointer"
             @onclick='() => OnClick("right")'>
            <svg xmlns="http://www.w3.org/2000/svg" style="color:#f6f6f6" fill="currentColor" class="bi bi-caret-right-fill" viewBox="0 0 16 16">
                <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z" />
            </svg>
        </div>
    </div>
    @if (type == "Object Detection")
    {
        <div class="pl-1" style="width:18%;display:inline-block;">
            @for (int i = 0; i < imageCategories.Count; i++)
            {
                <div>
                    <span style="display:inline-block;width:7px;height:15px;background-color:@colors[i]">
                    </span>
                    <span class="pl-1" style="display:inline-block">@imageCategories[i]</span>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Model.Image Image { get; set; }

    public Dictionary<string, Dictionary<string, Annotation>> allAnnotations;
    public Dictionary<string, Annotation> annotationGroup;

    private List<string> imageCategories;
    public int curCategory;
    public string curAnnotator;

    public string type;
    int curMarkerIndex = 0;

    int width;
    int height;

    List<string> colors = new List<string>()
    {
        "rgb(244, 26, 26)", "rgb(5, 99, 176)", "rgb(3, 165, 32)", "rgb(120, 6, 177)", "rgb(237, 253, 44)",
        "rgb(93, 255, 174)", "rgb(249, 150, 25)", "rgb(255, 159, 187)", "rgb(159, 241, 255)", "rgb(135, 255, 87)"
    };

    ElementReference divCanvas;
    Blazor.Extensions.BECanvasComponent myCanvas;
    Canvas2DContext currentCanvasContext;

    public void OnClick(string direction)
    {
        if (direction == "right")
        {
            curMarkerIndex++;
            if (allAnnotations.Keys.Count <= curMarkerIndex)
            {
                curMarkerIndex = 0;
            }
        }
        else if (direction == "left")
        {
            curMarkerIndex--;
            if (curMarkerIndex < 0)
            {
                curMarkerIndex = allAnnotations.Keys.Count - 1;
            }
        }

        curAnnotator = allAnnotations.Keys.ToList<string>()[curMarkerIndex];
        annotationGroup = allAnnotations[curAnnotator];
        curCategory = 0;


        if (annotationGroup[imageCategories[curCategory]].IsObjectDetection)
        {
            type = "Object Detection";
        }
        else
        {
            type = "Classification";
        }
    }

    public async Task reinitialize(Model.Image image)
    {
        Image = image;
        await OnInitializedAsync();
    }

    protected override Task OnInitializedAsync()
    {
        Bitmap img = new Bitmap(Path.Combine(environment.ContentRootPath, "wwwroot" + Image.Src), false);
        width = img.Width;
        height = img.Height;

        allAnnotations = new Dictionary<string, Dictionary<string, Annotation>>();

        type = null;
        if (Image != null)
        {
            parseAnnnotations();

            Annotation firstAnnotation = Image.Annotations.ToList()[0];
            curAnnotator = firstAnnotation.AnnotatorId;
            annotationGroup = allAnnotations[curAnnotator];

            imageCategories = annotationGroup.Keys.ToList();
            curCategory = imageCategories.IndexOf(firstAnnotation.Category);

            if (annotationGroup[firstAnnotation.Category].IsObjectDetection)
            {
                type = "Object Detection";
            }
            else
            {
                type = "Classification";
            }


        }


        return base.OnInitializedAsync();
    }

    private void parseAnnnotations()
    {
        foreach (Annotation annotation in Image.Annotations)
        {
            string annotator = annotation.AnnotatorId;
            if (!allAnnotations.ContainsKey(annotator))
            {
                allAnnotations[annotator] = new Dictionary<string, Annotation>();
            }
            allAnnotations[annotator][annotation.Category] = annotation;
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {

        jsRuntime.InvokeVoidAsync("canvasSize", new object[] { width, height });

        if (Image == null || Image.Annotations.Count == 0)
        {
            return base.OnAfterRenderAsync(firstRender);
        }


        DrawMarkers();

        return base.OnAfterRenderAsync(firstRender);

    }


    private async void DrawMarkers()
    {
        int markRadius = width / 160;
        currentCanvasContext = await myCanvas.CreateCanvas2DAsync();

        await currentCanvasContext.ClearRectAsync(0, 0, myCanvas.Width, myCanvas.Height);
        await RenderBackShapes(markRadius);
        if (annotationGroup[imageCategories[curCategory]].Markers != null && annotationGroup[imageCategories[curCategory]].Markers.Count > 0)
        {
            await RenderLines(annotationGroup[imageCategories[curCategory]].Markers.ToList(), markRadius);
            await RenderMarkers(annotationGroup[imageCategories[curCategory]].Markers.ToList(), markRadius);
        }

    }

    private async Task RenderLines(List<Marker> markers, int markRadius)
    {
        int colorIndex;
        Math.DivRem(curCategory, colors.Count, out colorIndex);

        await currentCanvasContext.SetFillStyleAsync(colors[colorIndex]);
        await currentCanvasContext.SetStrokeStyleAsync(colors[colorIndex]);
        await currentCanvasContext.SetLineWidthAsync(markRadius / 2);

        await currentCanvasContext.BeginPathAsync();
        await currentCanvasContext.MoveToAsync(markers[0].XCoords, markers[0].YCoords);
        foreach (Marker marker in markers)
        {
            await currentCanvasContext.LineToAsync(marker.XCoords, marker.YCoords);
        }
        await currentCanvasContext.ClosePathAsync();

        await currentCanvasContext.SetGlobalAlphaAsync(.5f);
        await currentCanvasContext.FillAsync();
        await currentCanvasContext.SetGlobalAlphaAsync(1f);
        await currentCanvasContext.StrokeAsync();
    }


    private async Task RenderMarkers(List<Marker> markers, int markRadius)
    {
        int colorIndex;
        Math.DivRem(curCategory, colors.Count, out colorIndex);
        foreach (Marker marker in markers)
        {
            await currentCanvasContext.SetFillStyleAsync(colors[colorIndex]);
            await currentCanvasContext.FillRectAsync(
                marker.XCoords - markRadius, marker.YCoords - markRadius, markRadius * 2, markRadius * 2);
            await currentCanvasContext.SetFillStyleAsync("rgb(252, 252, 252)");
            await currentCanvasContext.FillRectAsync(
                marker.XCoords - markRadius / 2, marker.YCoords - markRadius / 2, markRadius, markRadius);
        }
    }

    private async Task RenderBackShapes(int markRadius)
    {
        for (int i = 0; i < imageCategories.Count; i ++)
        {
            if (curCategory == i)
            {
                continue;
            }

            var backMarkers = annotationGroup[imageCategories[i]].Markers.ToList();
            if (backMarkers.Count == 0)
            {
                continue;
            }

            int colorIndex;
            Math.DivRem(i, colors.Count, out colorIndex);

            await currentCanvasContext.SetFillStyleAsync(colors[colorIndex]);
            await currentCanvasContext.SetStrokeStyleAsync(colors[colorIndex]);
            await currentCanvasContext.SetLineWidthAsync(markRadius / 4);

            await currentCanvasContext.BeginPathAsync();
            await currentCanvasContext.MoveToAsync(backMarkers[0].XCoords, backMarkers[0].YCoords);
            foreach (Marker marker in backMarkers)
            {
                await currentCanvasContext.LineToAsync(marker.XCoords, marker.YCoords);
            }
            await currentCanvasContext.ClosePathAsync();

            await currentCanvasContext.SetGlobalAlphaAsync(.3f);
            await currentCanvasContext.FillAsync();
            await currentCanvasContext.SetGlobalAlphaAsync(.6f);
            await currentCanvasContext.StrokeAsync();
        }

        await currentCanvasContext.SetGlobalAlphaAsync(1f);

    }
}
