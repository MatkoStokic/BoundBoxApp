@using BoundBoxApp.Model;
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using System.Drawing
@using Microsoft.AspNetCore.Hosting
@using System.IO
@inject IJSRuntime jsRuntime
@inject IWebHostEnvironment environment

<h3 class="mt-3">Annotation Preview</h3>

@if (annotationGroup != null && curCategory != null)
{
    <h4>Type: @type</h4>
    <span>Category: 
        <select @bind="curCategory" @bind:event="oninput">
            @foreach(string category in annotationGroup.Keys)
            {
                <option value="@category">@category</option>
            }
        </select>
    </span>
}

<div class="w-100 my-3">
    <div @ref="divCanvas" id="canvasContainer" class="position-relative"
         style="background-image:url('@Project.Images.ToList()[0].Src');background-size:contain">

        <BECanvas @ref="myCanvas" Width="@width" Height="@height"></BECanvas>
        <div class="position-absolute p-1 m-2" onmouseover="this.style.opacity=0.8;" onmouseout="this.style.opacity = 0.5;"
             style="top:50%;left:0;width:50px;border-radius:50%;background-color:#333333;opacity:0.5;cursor:pointer"
             @onclick='() => OnClick("left")'>
            <svg xmlns="http://www.w3.org/2000/svg" style="color:#f6f6f6" fill="currentColor" class="bi bi-caret-left-fill" viewBox="0 0 16 16">
                <path d="m3.86 8.753 5.482 4.796c.646.566 1.658.106 1.658-.753V3.204a1 1 0 0 0-1.659-.753l-5.48 4.796a1 1 0 0 0 0 1.506z" />
            </svg>
        </div>
        <div class="position-absolute p-1 m-2" onmouseover="this.style.opacity=0.8;" onmouseout="this.style.opacity = 0.5;"
             style="top:50%;right:0;width:50px;border-radius:50%;background-color:#333333;opacity:0.5;cursor:pointer"
             @onclick='() => OnClick("right")'>
            <svg xmlns="http://www.w3.org/2000/svg" style="color:#f6f6f6" fill="currentColor" class="bi bi-caret-right-fill" viewBox="0 0 16 16">
                <path d="m12.14 8.753-5.482 4.796c-.646.566-1.658.106-1.658-.753V3.204a1 1 0 0 1 1.659-.753l5.48 4.796a1 1 0 0 1 0 1.506z" />
            </svg>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Model.Project Project { get; set; }

    public Dictionary<string, Dictionary<string, Annotation>> allAnnotations;
    public Dictionary<string, Annotation> annotationGroup;
    public String curCategory;
    public string curAnnotator;

    public string type;
    int curMarkerIndex = 0;

    int width;
    int height;

    ElementReference divCanvas;
    Blazor.Extensions.BECanvasComponent myCanvas;
    Canvas2DContext currentCanvasContext;

    public void OnClick(string direction)
    {
        if (direction == "right")
        {
            curMarkerIndex++;
            if (allAnnotations.Keys.Count <= curMarkerIndex)
            {
                curMarkerIndex = 0;
            }
        }
        else if (direction == "left")
        {
            curMarkerIndex--;
            if (curMarkerIndex < 0)
            {
                curMarkerIndex = allAnnotations.Keys.Count - 1;
            }
        }

        curAnnotator = allAnnotations.Keys.ToList<string>()[curMarkerIndex];
        annotationGroup = allAnnotations[curAnnotator];
        curCategory = annotationGroup.Keys.ToList<string>()[0];


        if (annotationGroup[curCategory].IsObjectDetection)
        {
            type = "Object Detection";
        }
        else
        {
            type = "Classification";
        }
    }

    protected override Task OnInitializedAsync()
    {
        Bitmap img = new Bitmap(Path.Combine(environment.ContentRootPath, "wwwroot" + Project.Images.ToList()[0].Src), false);
        width = img.Width;
        height = img.Height;

        allAnnotations = new Dictionary<string, Dictionary<string, Annotation>>();

        type = null;
        if (Project.Images.Count > 0)
        {
            parseAnnnotations();

            Annotation firstAnnotation = Project.Images.ToList()[0].Annotations.ToList()[0];
            curCategory = firstAnnotation.Category;
            curAnnotator = firstAnnotation.AnnotatorId;
            annotationGroup = allAnnotations[curAnnotator];

            if (annotationGroup[curCategory].IsObjectDetection)
            {
                type = "Object Detection";
            }
            else
            {
                type = "Classification";
            }


        }


        return base.OnInitializedAsync();
    }

    private void parseAnnnotations()
    {
        foreach (Model.Image image in Project.Images)
        {
            string annotator = image.Id;
            if (!allAnnotations.ContainsKey(annotator))
            {
                allAnnotations[annotator] = new Dictionary<string, Annotation>();
            }
            allAnnotations[annotator][image.Src] = image.Annotations.ToList()[0];
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        jsRuntime.InvokeVoidAsync("canvasSize", new object[] { width, height });

        if (Project.Images == null || Project.Images.Count == 0)
        {
            return base.OnAfterRenderAsync(firstRender);
        }


        DrawMarkers();

        return base.OnAfterRenderAsync(firstRender);

    }


    private async void DrawMarkers()
    {
        int markRadius = width / 160;
        currentCanvasContext = await myCanvas.CreateCanvas2DAsync();

        await currentCanvasContext.ClearRectAsync(0, 0, myCanvas.Width, myCanvas.Height);

        if (annotationGroup[curCategory].Markers != null && annotationGroup[curCategory].Markers.Count > 0)
        {
            await RenderLines(annotationGroup[curCategory].Markers.ToList(), markRadius);
            await RenderMarkers(annotationGroup[curCategory].Markers.ToList(), markRadius);
        }

    }

    private async Task RenderLines(List<Marker> markers, int markRadius)
    {
        await currentCanvasContext.SetFillStyleAsync("rgb(244, 26, 26)");
        await currentCanvasContext.SetStrokeStyleAsync("rgb(244, 26, 26)");
        await currentCanvasContext.SetLineWidthAsync(markRadius / 2);

        await currentCanvasContext.BeginPathAsync();
        await currentCanvasContext.MoveToAsync(markers[0].XCoords, markers[0].YCoords);
        foreach (Marker marker in markers)
        {
            await currentCanvasContext.LineToAsync(marker.XCoords, marker.YCoords);
        }
        await currentCanvasContext.ClosePathAsync();

        await currentCanvasContext.SetGlobalAlphaAsync(.5f);
        await currentCanvasContext.FillAsync();
        await currentCanvasContext.SetGlobalAlphaAsync(1f);
        await currentCanvasContext.StrokeAsync();
    }


    private async Task RenderMarkers(List<Marker> markers, int markRadius)
    {
        foreach (Marker marker in markers)
        {
            await currentCanvasContext.SetFillStyleAsync("rgb(195, 12, 12)");
            await currentCanvasContext.FillRectAsync(
                marker.XCoords - markRadius, marker.YCoords - markRadius, markRadius * 2, markRadius * 2);
            await currentCanvasContext.SetFillStyleAsync("rgb(252, 252, 252)");
            await currentCanvasContext.FillRectAsync(
                marker.XCoords - markRadius / 2, marker.YCoords - markRadius / 2, markRadius, markRadius);
        }
    }
}
